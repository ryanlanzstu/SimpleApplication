var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// HTTPS port configuration
var https_port = normalizePort(process.env.PORT_HTTPS || '8443');

// SSL/TLS certificate options
var options = {};
if (process.env.ENV !== "DEV") {
  var privateKeyPath = 'path/to/privatekey.pem'; // Update with the actual path
  var certificatePath = 'path/to/server.crt'; // Update with the actual path

  var privateKey = fs.readFileSync(privateKeyPath, "utf8");
  var certificate = fs.readFileSync(certificatePath, "utf8");

  options = {
    key: privateKey,
    cert: certificate
  };
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof error.port === 'string' ? 'Pipe ' + error.port : 'Port ' + error.port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Create HTTPS server if not in DEV environment
if (process.env.ENV !== "DEV") {
  var server = https.createServer(options, app);

  server.listen(https_port);
  server.on('error', onError);
  server.on('listening', onListening);

  console.log(`HTTPS Server listening on port ${https_port}`);

  // Redirect from HTTP to HTTPS
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(/:\d+$/, `:${https_port}`) + req.url });
    res.end();
  }).listen(normalizePort(process.env.PORT || '8080'));

} else {
  // Fallback to HTTP if in DEV environment
  var server = http.createServer(app);

  var port = normalizePort(process.env.PORT || '8080');
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  console.log(`HTTP Server listening on port ${port}`);
}
